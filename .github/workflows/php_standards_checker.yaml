name: 'PHP Coding standards validation'

on: pull_request

jobs:
  phpcs-checker:
    name: 'PHPCS Coding standards validation'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Installing reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest
        
      - name: Configuring diff file
        run: |
          # Add the current directory to the list of safe directories for Git
          git config --global --add safe.directory .
          export GIT_CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r --diff-filter=ACM origin/$GITHUB_BASE_REF origin/$GITHUB_HEAD_REF)
          cd scripts/grumphp && composer install && cd ../..
              cat $GIT_CHANGED_FILES
              if [ -z "$GIT_CHANGED_FILES" ]; then
                echo ----------------------------
                echo There are no files to check.
                echo ----------------------------
                exit 0
              fi

      - name: Run GrumPHP(PHPCS)
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Temporary files for capturing streams
          STDOUT_FILE=$(mktemp)
          STDERR_FILE=$(mktemp)
          # Run GrumPHP and handle streams
          echo "$GIT_CHANGED_FILES" \
            | ./scripts/grumphp/vendor/bin/grumphp run --tasks=phpcs --no-interaction --config=scripts/grumphp/grumphp.yml \
            > >(tee "$STDOUT_FILE") \
            2> >(tee "$STDERR_FILE" >&2) || true
          # Check if STDERR_FILE is non-empty
          if [ -s "$STDERR_FILE" ]; then
            # Pass stderr to reviewdog
            cat "$STDERR_FILE" | ./bin/reviewdog -fail-level=any -f=checkstyle -name="PHPCS GrumPHP" -reporter=gitlab-mr-discussion -filter-mode=nofilter
          else
            echo "No errors found in PHP files. Skipping reviewdog."
          fi
          # Clean up temporary files
          rm -f "$STDOUT_FILE" "$STDERR_FILE"

